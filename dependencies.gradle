/*
 * Add your dependencies here. Supported configurations:
 *  - api("group:name:version:classifier"): if you use the types from this dependency in the public API of this mod
 *       Available at runtime and compiletime for mods depending on this mod
 *  - implementation("g:n:v:c"): if you need this for internal implementation details of the mod, but none of it is visible via the public API
 *       Available at runtime but not compiletime for mods depending on this mod
 *  - compileOnly("g:n:v:c"): if the mod you're building doesn't need this dependency during runtime at all, e.g. for optional mods
 *       Not available at all for mods depending on this mod, only visible at compiletime for this mod
 *  - compileOnlyApi("g:n:v:c"): like compileOnly, but also visible at compiletime for mods depending on this mod
 *       Available at compiletime but not runtime for mods depending on this mod
 *  - runtimeOnlyNonPublishable("g:n:v:c"): if you want to include a mod in this mod's runClient/runServer runs, but not publish it as a dependency
 *       Not available at all for mods depending on this mod, only visible at runtime for this mod
 *  - devOnlyNonPublishable("g:n:v:c"): a combination of runtimeOnlyNonPublishable and compileOnly for dependencies present at both compiletime and runtime,
 *       but not published as Maven dependencies - useful for RFG-deobfuscated dependencies or local testing
 *  - runtimeOnly("g:n:v:c"): if you don't need this at compile time, but want it to be present at runtime
 *       Available at runtime for mods depending on this mod
 *  - annotationProcessor("g:n:v:c"): mostly for java compiler plugins, if you know you need this, use it, otherwise don't worry
 *  - testCONFIG("g:n:v:c") - replace CONFIG by one of the above (except api), same as above but for the test sources instead of main
 *
 *  - shadowImplementation("g:n:v:c"): effectively the same as API, but the dependency is included in your jar under a renamed package name
 *       Requires you to enable usesShadowedDependencies in gradle.properties
 *
 *  - compile("g:n:v:c"): deprecated, replace with "api" (works like the old "compile") or "implementation" (can be more efficient)
 *
 * You can exclude transitive dependencies (dependencies of the chosen dependency) by appending { transitive = false } if needed,
 * but use this sparingly as it can break using your mod as another mod's dependency if you're not careful.
 *
 * To depend on obfuscated jars you can use `devOnlyNonPublishable(rfg.deobf("dep:spec:1.2.3"))` to fetch an obfuscated jar from maven,
 * or `devOnlyNonPublishable(rfg.deobf(project.files("libs/my-mod-jar.jar")))` to use a file.
 *
 * Gradle names for some of the configuration can be misleading, compileOnlyApi and runtimeOnly both get published as dependencies in Maven, but compileOnly does not.
 * The buildscript adds runtimeOnlyNonPublishable to also have a runtime dependency that's not published.
 *
 * For more details, see https://docs.gradle.org/8.0.1/userguide/java_library_plugin.html#sec:java_library_configurations_graph
 */
dependencies {
	compileOnly fileTree(dir: 'lib', include: '*.jar')
	compileOnly "com.gregoriust.gregtech:gregtech_1.7.10:6.17.05:dev"

	//runtimeOnly 'org.apache.commons:commons-math3:3.2' // Needed for dev opis because it doesn't know how to specify dependencies properly
	//runtimeOnly 'org.jfree:jcommon:1.0.21'             // Needed for dev opis because it doesn't know how to specify dependencies properly
	//runtimeOnly 'org.jfree:jfreechart:1.0.17'          // Needed for dev opis because it doesn't know how to specify dependencies properly
	//runtimeOnly 'com.miglayout:miglayout-swing:4.2'    // Needed for dev opis because it doesn't know how to specify dependencies properly
	//runtimeOnly 'net.sf.opencsv:opencsv:2.3'           // Needed for dev opis because it doesn't know how to specify dependencies properly
	//runtimeOnly "io.netty-opis:Netty-opis:4.0.23"      // Needed for dev opis because it doesn't know how to specify dependencies properly
	runtimeOnly "com.github.GTNewHorizons:Opis:1.4.6-mapless"
	compileOnly "com.github.GTNewHorizons:WDMla:2.7.2:dev"
	//compileOnly "com.github.GTNewHorizons:CodeChickenLib:1.2.1:dev"
	compileOnly "com.github.GTNewHorizons:CodeChickenCore:1.4.3:dev"
	compileOnly "com.github.GTNewHorizons:NotEnoughItems:2.7.53-GTNH-pre:dev"
	compileOnly "com.github.GTNewHorizons:ForestryMC:4.10.12-pre:dev"
	compileOnly "com.github.GTNewHorizons:BuildCraft:7.1.43:dev"
	compileOnly "com.github.GTNewHorizons:Baubles-Expanded:2.1.8-GTNH:dev"
	compileOnly "micdoodle8.mods:MicdoodleCore:1.7-3.0.12.504:Dev"
	compileOnly "micdoodle8.mods:GalacticraftCore:1.7-3.0.12.504:Dev"
	compileOnly "micdoodle8.mods:Galacticraft-Planets:1.7-3.0.12.504:Dev"
	compileOnly "thaumcraft:Thaumcraft:1.7.10-4.2.3.5:dev"
	compileOnly "enviromine:EnviroMine:1.3.124:deobf"
	compileOnly "com.github.GTNewHorizons:Botania:1.12.13-GTNH-pre:dev"
	compileOnly "com.github.GTNewHorizons:Railcraft:9.16.30:dev"
	compileOnly "com.github.GTNewHorizons:twilightforest:2.7.7:dev"
	compileOnly "com.github.GTNewHorizons:Applied-Energistics-2-Unofficial:rv3-beta-635-GTNH-pre:dev"
	compileOnly "cofh:CoFHLib:1.7.10R3.0.3:dev"
	compileOnly "com.github.GTNewHorizons:AppleCore:3.3.4:dev"
	compileOnly "com.github.GTNewHorizons:OpenComputers:1.11.16-GTNH:dev"
	// This ComputerCraft thing is *SUCH* a hack, but ComputerCraft is... not right...  This only works because of CodeChickenCore Magic being included up above...
	compileOnly "dan200.computercraft:ComputerCraft:1.75"
	compileOnly ("com.github.GTNewHorizons:OpenBlocks:1.11.5-GTNH:dev") {
		transitive = false
	}
	compileOnly "com.github.GTNewHorizons:OpenModsLib:0.10.10:dev"
	compileOnly "ic2:IC2Classic:1.2.1.8:dev"
}
